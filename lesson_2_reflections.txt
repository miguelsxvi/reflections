-What happens when you initialize a repository? Why do you need to do it?

A new hidden directory name ".git" is created, where information about the 
history of my files will be stored from the moment I choose what files to 
commit. I need to do it or else I will not be able to save commits, and then
I will not take advantage of the benefits of git.
-------------------------------------------------

-How is the staging area different from the working directory and the repository? 
What value do you think it offers?

The stagin area seems to be the like a storage room before the goods are shipped 
so when the truck comes, it just takes everything there is in the room. It is the 
company's duty to put the right items there beforehand. The working directory is
where everything is stored, say like the whole building, and the (git) repository 
would be a paper where the manager keeps track of all shipments so far. Since the
repository also keeps some other stuff (I assume) so it can recover previous 
versions, maybe the concept of document is a little bit to shallow, but let's leave
it like that for now, maybe later on as I learn more about its nature I will change it.
--------------------------------------------------------------

-How can you use the staging area to make sure you have one commit per logical change?

When one is about to make a commit to save the current status of the file after supposedly
have done a "logical change", to be sure that the change is significant enough to be
commited the good action is run "git diff --staged" which compares the file in the staging 
area and the latest commit. If one chooses to continue working on the file because
the modifications done were not that relevant, later on (after saving the file) they can 
compare via "git diff" (without arguments) the saved version in the working directory and 
the version in the staging area, pass the first to the staging area and compare again 
as previously said. Obviously, there is no need to be so meticulous.
--------------------------------------------------------------

-What are some situations when branches would be helpful in keeping your history 
organized? How would branches help?

When trying out an experimental feature which one is not sure whether they will implement
in the final version, but one still wants to have a working version to show or polish. This
is more or less the same answer from the video, there is not too many different answers in
my opinion. It all comes down to things you don't want to have in the oficial version.
-------------------------------------------------------------

-How do the diagrams help you visualize the branch structure?

The human mid is very good at visual memory... nah, let's just say that making diagrams
makes everything more tidy, and there is a visual representation of the whole history which
helps tracking down commits, see which ones are unreachable, or where branches split
and merge; all of that in an explicit form and showing everything at the same time, rather
than a list of code-like lines where everything is cluttered and messy, an where one cannot
actually see the whole picture at a time, because we can only git-log one branch (isn't that
right?).
-----------------------------------------------------------

-What is the result of merging two branches together? Why do we represent it 
in the diagram the way we do?

The result of merging two branches is the combination of the latest commit for each branch,
meaning that the changes done since the branches diverged will be combined in accordance to
several rules. The new commit will be part of the branch currently checked out, and through
that commit we gain access to all the previous commits in both branches. The diagram shows
that the commit created has as parents the latest commit in each branch.
-----------------------------------------------------------

-What are the pros and cons of Git’s automatic merging vs. always doing merges 
manually?

Automatic merging saves a lot of time, I mean, duh. It would be a big pain in the ass
having to always go through the semi-merged file one wants to commit, like in those 
ocassions when there is a conflict, deleting the parts that should not be in the new
file. When it is so obvious what things should be added, such as a new separate function
that has been newly written. 